#include <iostream>
#include <string>
#define _USE_MATH_DEFINES
#include <cmath>
#include <math.h>
#include <fstream>
#include <stdio.h>
#include <ctime>
#include <stdlib.h>
#include <iomanip>
#include <map>

using namespace std;

class System {
	public: 
		double x, y;
		
	System(double x, double y) : x(x), y(y)
	{}
	System MethodOSI()
	{
		System res(0, 0);
		res.x = (sin(y) - 1.6) / 2.0;
		res.y =  0.8 - cos(0.5 + x);
		
		return res;
	}
	
	System MethodNewton()
	{
		System res(0.0, 0.0);
		
		res.x = ((-x^2 - y^2 + 1) * cos(y + x) - 2 * y * (-sin(x + y) + 1.3*x)) / (2 * x * cos(x + y) - 2 * x * (cos(x + y) - 1.3)) + x;
		res.y = ( 2 * x * cos(x + y) +  ) / (2 * x * cos(x + y) - 2 * x * (cos(x + y) - 1.3)) + y
		
		return res;
	}
	
	void Show()
	{
		cout << setprecision(10) << "x = " <<x << " " << "y = " << y << endl;
	}
	
	System operator-(System m)
	{
		System res(0.0, 0.0);
		res.x = x - m.x;
		res.y = y - m.y;
		
		return res;
	}
	
	bool operator>=(System m)
	{
		if(abs(x) < abs(m.x) && abs(y) < abs(m.y));
			return false;
		return true;
	}
};


int main()
{
	double e;
	cout << "e = ";
	cin >> e;
	
	/*
	System xy(10, 10);
	System xyn(0.0, 0.0);
	xyn = xy.MethodOSI();
	
	while(abs(xy.x - (sin(xy.y) - 1.6) / 2.0) >= e || abs(xy.y -  0.8 + cos(0.5 + xy.x)) >= e)
	{
		cout << "LOL";
		xy = xyn;
		xyn = xyn.MethodOSI();
	}
	xy.Show();
	*/
	
	
	return 0;
}
